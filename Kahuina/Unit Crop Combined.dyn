{
  "Uuid": "61a5c8c2-e2e0-4517-b2bc-48e9a0accf04",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Unit Crop Combined",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport math\r\nfrom io import StringIO\r\n\r\nimport Autodesk\r\nimport RevitServices\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import FilteredElementCollector, ViewPlan,BuiltInParameter, BuiltInCategory, ElementTransformUtils, FamilyInstance\r\n\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Autodesk.Revit.DB import CurveLoop, DetailLine, XYZ, ViewDuplicateOption, ElementId, Electrical\r\n\r\nclr.AddReference('System')\r\nfrom System.Collections.Generic import  IList \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\n\r\nclass MyException(Exception):\r\n    pass\r\n\r\n# For Outputting print to watch node\r\noutput = StringIO()\r\nsys.stdout = output\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nactive_view = doc.ActiveView\r\n\r\ndef transaction(func):\r\n  def wrapper(*args, **kwargs):\r\n      TransactionManager.Instance.EnsureInTransaction(doc)\r\n      func(*args, **kwargs)\r\n      TransactionManager.Instance.TransactionTaskDone()\r\n  return wrapper\r\n\r\ndef print_member(obj):\r\n  for i in dir(obj):\r\n    print(i)\r\n\r\ndef get_element(id):\r\n  if isinstance(id, str):\r\n    return doc.GetElement(ElementId(id))\r\n  elif isinstance(id, ElementId):\r\n    return doc.GetElement(id)\r\n  return None\r\n\r\ndef get_elements(ids):\r\n  elements = []\r\n  if all(isinstance(item, ElementId) for item in ids):\r\n    for id in ids:\r\n      elements.append(doc.GetElement(id))\r\n  if all(isinstance(item, int) for item in ids):\r\n    for id in ids:\r\n      x = doc.GetElement(ElementId(id))\r\n      elements.append(x)\r\n  return elements\r\n\r\ndef get_element_via_parameter(elements, parameter_name, parameter_value):\r\n  result = []\r\n  for el in elements:\r\n    param_ViewType = el.GetParameters(parameter_name)[0]\r\n    if param_ViewType.AsValueString() == parameter_value:\r\n      result.append(el)\r\n      continue\r\n  return result\r\n\r\ndef get_num(str):\r\n  return int(''.join(char for char in str if char.isdigit()))\r\n\r\n\r\n\r\ndef get_room_curve(group_elements):\r\n  room_curve = CurveLoop()\r\n  for id in group_elements:\r\n    e = doc.GetElement(id)\r\n    if isinstance(e, DetailLine):\r\n      line = e.GeometryCurve\r\n      room_curve.Append(line)\r\n  return room_curve\r\n \r\n\r\ndef get_view_range(target_view_type, target_discipline, range_value):\r\n    min_range = range_value[0]\r\n    max_range = range_value[1]\r\n    result = []\r\n    view_list = FilteredElementCollector(doc).OfClass(ViewPlan).ToElements()\r\n    for view in view_list:\r\n        view_type = view.LookupParameter(\"View Type\").AsValueString()\r\n        if view_type != target_view_type: continue\r\n\r\n        discipline = view.LookupParameter(\"Type\").AsValueString()\r\n        if discipline != target_discipline: continue\r\n\r\n        level = get_num(view.Name)\r\n        if min_range <= level <= max_range:\r\n            # print(view.Name, level)\r\n\r\n            result.append(view)\r\n    return result\r\n\r\nclass UnitDetail:\r\n\r\n  def __init__(self, min, max, pos, typical=False):\r\n    self.min = min\r\n    self.max = max\r\n    self.pos = pos\r\n    self.typical = typical\r\n\r\n\r\nprefixes = {\r\n  \"Lighting\": \"L\",\r\n  \"Power\": \"P\",\r\n  \"Data\": \"D\",\r\n  \"Infrastructure\": \"I\",\r\n  \"Device\": \"DP\",\r\n}\r\n\r\nrange_value = [4, 43]\r\n\r\ntarget_view_type = UnwrapElement(IN[0])\r\ndo_delete = UnwrapElement(IN[1])\r\n\r\n# Range which the units appear\r\nmatrix = {\r\n  \"01 A-2A\": UnitDetail(4, 31, {}, True),\r\n  \"02 A-2B\": UnitDetail(4, 31, {}, True),\r\n  \"03 A-2BR\": UnitDetail(4, 37, {}, True),\r\n  \"04 A-2AR\": UnitDetail(4, 37, {}, True),\r\n  \"05 A-1BR\": UnitDetail(4, 35, {}, True),\r\n  \"06 A-1B\": UnitDetail(4, 35, {}, True),\r\n  \"07 A-2A\": UnitDetail(4, 34, {}, True),\r\n  \"08 A-2B\": UnitDetail(4, 34, {}, True),\r\n  \"09 A-2BR\": UnitDetail(4, 38, {35: \"08\", 36: \"07\", 37: \"07\", 38: \"06\"}, True),\r\n  \"10 A-2AR\": UnitDetail(4, 38, {35: \"09\", 36: \"08\", 37: \"08\", 38: \"07\"}, True),\r\n  \"11 A-1AR\": UnitDetail(4, 36, {35: \"10\", 36: \"09\",}, True),\r\n  \"12 A-1A\": UnitDetail(4, 31, {}, True),\r\n  \"01 A-3E\": UnitDetail(32, 32, {}),\r\n  \"02 A-2B.1\": UnitDetail(32, 32, {}),\r\n  \"01 A-1C\": UnitDetail(33, 36, {}),\r\n  \"02 A-2D\": UnitDetail(33, 42, {}),\r\n  \"07 A-3B\": UnitDetail(35, 35, {}),\r\n  \"05 A-3F\": UnitDetail(36, 36, {}),\r\n  \"01 A-3D\": UnitDetail(37, 39, {}),\r\n  \"05 A-3G\": UnitDetail(37, 37, {}),\r\n  \"03 A-2BR.1\": UnitDetail(38, 38, {}),\r\n  \"04 A-3H\": UnitDetail(38, 38, {}),\r\n  \"04 A-3A\": UnitDetail(39, 43, {43: \"03\",}),\r\n  \"06 A-3BR\": UnitDetail(39, 39, {}),\r\n  \"01 A-3J\": UnitDetail(40, 40, {}),\r\n  \"06 A-2BR.2\": UnitDetail(40, 40, {}),\r\n  \"01 A-3DR\": UnitDetail(41, 43, {}),\r\n  \"03 A-2DR\": UnitDetail(39, 42, {}),\r\n  \"02 A-3C\": UnitDetail(43, 43, {}),\r\n  \"04 A-3C\": UnitDetail(43, 43, {}),\r\n  \"06 A-2D\": UnitDetail(37, 42, {38: \"05\", 39: \"05\",  40: \"05\", 41: \"05\", 42: \"05\"}),\r\n  \"06 A-2B.1\": UnitDetail(36, 36, {}),\r\n}\r\n\r\ncrop_detail_group = [\r\n  # from floor plan id 1581961 (TYPICAL 4-31)\r\n  1582090,1582509,1582895,1583204,1583340,1583377,1583416,1583456,1583499,1583535,1583572,1583609,\r\n  1760509, # 01 A-3E\r\n  1771674, # 02 A-2B.1\r\n  1771810, # 01 A-1C\r\n  1783480, # 02 A-2D\r\n  1785457, # 07 A-3B\r\n  1799377, # 05 A-3F\r\n  1834883, # 01 A-3D\r\n  1836240, # 05 A-3G\r\n  1953214, # 03 A-2BR.1\r\n  1957088, # 04 A-3H\r\n  1957685, # 04 A-3A\r\n  1960991, # 06 A-3BR\r\n  1964094, # 01 A-3J\r\n  1964189, # 06 A-2BR.2\r\n  1965610, # 01 A-3DR\r\n  1965674, # 03 A-2DR\r\n  1967224, # 02 A-3C\r\n  1969196, # 04 A-3C\r\n  2058782, # 06 A-2B.1\r\n  2024228, # 06 A-2D\r\n]\r\n\r\n@transaction \r\ndef start():\r\n  # detail_groups = FilteredElementCollector(doc, base_view.Id).OfCategory(BuiltInCategory.OST_IOSDetailGroups).ToElements()\r\n\r\n  detail_groups = get_elements(crop_detail_group)\r\n  curve_dict = {}\r\n  for dg in detail_groups:\r\n    if not dg: continue\r\n    group_elements = dg.GetMemberIds()\r\n    element = \"\"\r\n    try:\r\n      element = get_room_curve(group_elements)\r\n    except Exception as e:\r\n      print(\"Error: \", dg.Name)\r\n      raise MyException(f\"[{dg.Name}] is broken.\\n\\n{e}\")\r\n\r\n    curve_dict[dg.Name] = element\r\n\r\n  for target_discipline in prefixes:\r\n    prefix = prefixes[target_discipline]\r\n    target_views = get_view_range(target_view_type, target_discipline, range_value)\r\n    \r\n    print(\"Asds\")\r\n    # Apply copy crop\r\n    for plan_view in target_views:\r\n      # Get level num\r\n      level = get_num(plan_view.Name)\r\n\r\n      # Remove dependents\r\n      dependents = plan_view.GetDependentViewIds()\r\n      if dependents:\r\n        for id_dpdt in dependents:\r\n          doc.Delete(id_dpdt)\r\n      if do_delete:\r\n        continue\r\n      for unit_name, curve in curve_dict.items():\r\n        if unit_name not in matrix:\r\n          raise MyException(f\"[{unit_name}] is an unaccounted detail group\")\r\n\r\n        # Only copies within the range\r\n        if matrix[unit_name].min <= level <= matrix[unit_name].max:\r\n          # Duplicate\r\n          new_plan = plan_view.Duplicate(ViewDuplicateOption.AsDependent)\r\n          dupli_view = doc.GetElement(new_plan)\r\n          dupli_view.CropBoxVisible = True\r\n          dupli_view.CropBoxActive = True\r\n\r\n          # Set Crop Shape\r\n          crop_manager = dupli_view.GetCropRegionShapeManager()\r\n          crop_manager.SetCropShape(curve)\r\n\r\n          # Rename\r\n          rename = \"\"\r\n          if level in matrix[unit_name].pos:\r\n            type_name = unit_name.split(\" \")[1]\r\n            unit_pos = matrix[unit_name].pos[level]\r\n            rename = f\"UNIT {level:02d}{unit_pos} {type_name}-{prefix}\"\r\n          else:\r\n            rename = f\"UNIT {level:02d}{unit_name}-{prefix}\"\r\n          print(\"RENAME: \", rename)\r\n          dupli_view.Name = rename\r\n\r\n          # Set Grids\r\n          # detail_groups = FilteredElementCollector(doc, base_view.Id).OfCategory(BuiltInCategory.OST_IOSDetailGroups).ToElements()\r\n\r\n    # break\r\n\r\n\r\n\r\n\r\n\r\nstart()\r\n\r\nOUT = output.getvalue()\r\n\r\n\r\n\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "61b5c91169cb4263948acd738f1b17d2",
      "Inputs": [
        {
          "Id": "88446cee7ba04b2ea55dd61ea694888a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4316ebcf191a4cfab8a2d8930410528b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3cdcde1cbc0549f198752c45b35df58a",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7a25ff87ab6943319715766bd46d592e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "08f00b8aec4d4d91829c31d26e54b917",
      "Inputs": [
        {
          "Id": "4035d255bd6b4c5b9724c87d87d2bc3a",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f25cfda59fe846b6a4f047fa9a2ebc22",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "243f10d4633a41bea7c1e062bedc229f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ee1ed0634c5640e29d384520e650ffb8",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "// target_view_type\n\"Presentation Views\";\n\"Working Views\";\n\"Base Views\";\n\n// Discipline\n\"Lighting\";\n\"Power\";\n\"Data\";\n\"Infrastructure\";\n\"Device\";",
      "Id": "aa97001aec1440829359244471bc226a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bd6759b5ca004b338e10fb39dd03e2b5",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "56035d622e0b4890baef4efdae49cd13",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7b8bdff6a80c4106adf50394b7d57073",
          "Name": "",
          "Description": "Value of expression at line 4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c2441ddf6b0a4e70b385c8d971c30e1e",
          "Name": "",
          "Description": "Value of expression at line 7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5bbfc7f1a6564749a40b4fabff107a28",
          "Name": "",
          "Description": "Value of expression at line 8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9970263632ea4a5aa6d0027a6b6e833c",
          "Name": "",
          "Description": "Value of expression at line 9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9d9a9368580145d2a13f9cbd3703d1e7",
          "Name": "",
          "Description": "Value of expression at line 10",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1b31c75709924ef0802ccbec838ce638",
          "Name": "",
          "Description": "Value of expression at line 11",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "1ac626208d6e4c9393f4fc29d1e53050",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ae014afe17334f88aeaf589454881977",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    }
  ],
  "Connectors": [
    {
      "Start": "7a25ff87ab6943319715766bd46d592e",
      "End": "4035d255bd6b4c5b9724c87d87d2bc3a",
      "Id": "1d53bc468f044853ba2db3a1b7bbb921",
      "IsHidden": "False"
    },
    {
      "Start": "ee1ed0634c5640e29d384520e650ffb8",
      "End": "4316ebcf191a4cfab8a2d8930410528b",
      "Id": "5566dc9a92554796b91854c286fe0221",
      "IsHidden": "False"
    },
    {
      "Start": "bd6759b5ca004b338e10fb39dd03e2b5",
      "End": "88446cee7ba04b2ea55dd61ea694888a",
      "Id": "7f43d08cb25c467593ce968272a00651",
      "IsHidden": "False"
    },
    {
      "Start": "ae014afe17334f88aeaf589454881977",
      "End": "3cdcde1cbc0549f198752c45b35df58a",
      "Id": "347bfff7bbee46249b87c388775d2e2a",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.13",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Unit Crop Combined.py",
        "ShowGeometry": true,
        "Id": "61b5c91169cb4263948acd738f1b17d2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 208.37003111364584,
        "Y": -36.29206877439924
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "08f00b8aec4d4d91829c31d26e54b917",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 542.6783409811128,
        "Y": 7.1641619941658519
      },
      {
        "Name": "To delete?",
        "ShowGeometry": true,
        "Id": "243f10d4633a41bea7c1e062bedc229f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -172.08258407580894,
        "Y": 40.451559993430465
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "aa97001aec1440829359244471bc226a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -175.85098727210493,
        "Y": -269.26445599106194
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "1ac626208d6e4c9393f4fc29d1e53050",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -155.62499902110736,
        "Y": 179.77937747538996
      }
    ],
    "Annotations": [],
    "X": 119.16257254881771,
    "Y": 54.129128334191762,
    "Zoom": 1.1853113715739385
  }
}