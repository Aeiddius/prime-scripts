{
  "Uuid": "d3729592-126c-4263-96c7-1ee70d6622dc",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Group Model Duplicator",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "d5c6362afcf8413bafd6e659ff1455e0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "475c85ddf0c84f79a65d131ee377ae33",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport math\r\nimport re\r\nfrom io import StringIO\r\n\r\nimport Autodesk\r\nimport RevitServices\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import FilteredElementCollector, ViewPlan, Transform, BuiltInCategory, ElementTransformUtils, FamilyInstance\r\n\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Autodesk.Revit.DB import CurveLoop, DetailLine, FamilyInstance, MEPSystem, ElementId, CopyPasteOptions\r\nfrom Autodesk.Revit.DB.Electrical import ElectricalEquipment, ElectricalSystem\r\nclr.AddReference('System')\r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\n\r\n\r\n# For Outputting print to watch node\r\noutput = StringIO()\r\nsys.stdout = output\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nactive_view = doc.ActiveView\r\n\r\ndef transaction(func):\r\n    def wrapper(*args, **kwargs):\r\n            TransactionManager.Instance.EnsureInTransaction(doc)\r\n            func(*args, **kwargs)\r\n            TransactionManager.Instance.TransactionTaskDone()\r\n    return wrapper\r\n\r\ndef print_member(obj):\r\n  for i in dir(obj):\r\n      print(i)\r\n\r\ndef get_element(id):\r\n  if isinstance(id, str):\r\n    return doc.GetElement(ElementId(id))\r\n  elif isinstance(id, ElementId):\r\n    return doc.GetElement(id)\r\n  return None\r\n\r\ndef get_element_via_parameter(elements, parameter_name, parameter_value):\r\n    result = []\r\n    for el in elements:\r\n        param_ViewType = el.GetParameters(parameter_name)[0]\r\n        if param_ViewType.AsValueString() == parameter_value:\r\n            result.append(el)\r\n            continue\r\n    return result\r\n\r\ndef get_num(str):\r\n    return int(''.join(char for char in str if char.isdigit()))\r\n\r\ndef get_room_curve(group_elements):\r\n  room_curve = CurveLoop()\r\n  for id in group_elements:\r\n    e = doc.GetElement(id)\r\n    if isinstance(e, DetailLine):\r\n      line = e.GeometryCurve\r\n      room_curve.Append(line)\r\n  return room_curve\r\n\r\n\r\ndef get_view_range(target_view_type, target_discipline):\r\n    filtered_list = []\r\n    view_list = FilteredElementCollector(doc).OfClass(ViewPlan).ToElements()\r\n\r\n    for view in view_list:\r\n\r\n        view_type = view.LookupParameter(\"View Type\").AsValueString()\r\n        if view_type != target_view_type: continue\r\n\r\n        discipline = view.LookupParameter(\"Type\").AsValueString()\r\n        if discipline != target_discipline: continue\r\n\r\n        filtered_list.append(view)\r\n    return filtered_list\r\n\r\n\r\ndef filter_source_elements(base_view):\r\n    exception_categories = [\r\n        int(BuiltInCategory.OST_RvtLinks),\r\n        int(BuiltInCategory.OST_Grids),\r\n        int(BuiltInCategory.OST_SectionBox),\r\n        int(BuiltInCategory.OST_Cameras),\r\n        int(BuiltInCategory.OST_Elev),\r\n        int(BuiltInCategory.OST_Viewers),\r\n        # int(BuiltInCategory.OST_IOSModelGroups)\r\n        ]\r\n\r\n    elements_source = FilteredElementCollector(doc, base_view.Id).WhereElementIsNotElementType().ToElements()\r\n    filtered_elements = []\r\n    # Filter Elements\r\n    for e in elements_source:\r\n        category = e.Category\r\n        if not category: continue\r\n\r\n        if not category or (category and category.Id.IntegerValue in exception_categories):\r\n            continue\r\n        if category.Id.IntegerValue == int(BuiltInCategory.OST_IOSModelGroups):\r\n        \r\n            ids = e.GetMemberIds()\r\n            for id in ids:\r\n                filtered_elements.append(get_element(id))\r\n            continue\r\n\r\n        if isinstance(e, FamilyInstance):\r\n            if isinstance(e.MEPModel, ElectricalEquipment):\r\n                filtered_elements.append(e)\r\n            continue\r\n\r\n        filtered_elements.append(e)\r\n        # print(e, e.Name)\r\n        \r\n    return filtered_elements\r\n\r\ndef filter_source_elements2(base_view):\r\n    exception_categories = [\r\n        int(BuiltInCategory.OST_RvtLinks),\r\n        int(BuiltInCategory.OST_Grids),\r\n        int(BuiltInCategory.OST_SectionBox),\r\n        int(BuiltInCategory.OST_Cameras),\r\n        int(BuiltInCategory.OST_Elev),\r\n        int(BuiltInCategory.OST_Viewers),\r\n        # int(BuiltInCategory.OST_IOSModelGroups)\r\n        ]\r\n\r\n    elements_source = FilteredElementCollector(doc, base_view.Id).WhereElementIsNotElementType().ToElements()\r\n    filtered_elements = []\r\n    added_ids = []\r\n    # Filter Elements\r\n    group_count = 0\r\n    for e in elements_source:\r\n        category = e.Category\r\n        if not category: continue\r\n\r\n        if not category or (category and category.Id.IntegerValue in exception_categories):\r\n            continue\r\n        if category.Id.IntegerValue == int(BuiltInCategory.OST_IOSModelGroups):\r\n            # print(f\"Group {group_count}: \", e.Name)\r\n            ids = e.GetMemberIds()\r\n            for id in ids:\r\n                grp_elem = get_element(id)\r\n                filtered_elements.append(grp_elem)\r\n                added_ids.append(grp_elem.Id)\r\n\r\n                # Get Electrical System\r\n                if isinstance(grp_elem, FamilyInstance) and grp_elem.MEPModel:\r\n                    elec_system = grp_elem.MEPModel.GetElectricalSystems().GetEnumerator()\r\n                    for j in elec_system:\r\n                        if j.Id not in added_ids:\r\n                            filtered_elements.append(j)\r\n                            added_ids.append(j.Id)\r\n                            # print(f\"Added {j.Id} {j.LoadName} {j}\")\r\n                            \r\n            group_count += 1\r\n            continue\r\n\r\n        if isinstance(e, FamilyInstance) and isinstance(e.MEPModel, ElectricalEquipment):\r\n            # print(\"Included: \", e.Name, \" \", e.Id)\r\n            filtered_elements.append(e)\r\n            continue\r\n\r\n        if isinstance(e, ElectricalSystem):\r\n            continue\r\n        \r\n        # Filter out Switch systems\r\n        if isinstance(e, MEPSystem):\r\n            if (e.BaseEquipment):\r\n                if e.BaseEquipment.Id in added_ids and e not in filtered_elements:\r\n                    print(e, e.Name)\r\n                    filtered_elements.append(e)\r\n\r\n        filtered_elements.append(e)\r\n        added_ids.append(e.Id)\r\n\r\n\r\n        \r\n    return filtered_elements\r\n\r\nclass UnitDetail:\r\n\r\n  def __init__(self, min, max, pos, typical=False):\r\n    self.min = min\r\n    self.max = max\r\n    self.pos = pos\r\n    self.typical = typical\r\n\r\nclass Source:\r\n\r\n    def __init__(self,view, elements, ):\r\n        self.elements = elements\r\n        self.sview = view\r\n        self.elements_list = List[ElementId]([e.Id for e in self.elements])\r\n\r\n\r\nmatrix = {\r\n  \"01 A-2A\": UnitDetail(4, 31, {}, True),\r\n  \"02 A-2B\": UnitDetail(4, 31, {}, True),\r\n  \"03 A-2BR\": UnitDetail(4, 37, {}, True),\r\n  \"04 A-2AR\": UnitDetail(4, 37, {}, True),\r\n  \"05 A-1BR\": UnitDetail(4, 35, {}, True),\r\n  \"06 A-1B\": UnitDetail(4, 35, {}, True),\r\n  \"07 A-2A\": UnitDetail(4, 34, {}, True),\r\n  \"08 A-2B\": UnitDetail(4, 34, {}, True),\r\n  \"09 A-2BR\": UnitDetail(4, 38, {35: \"08\", 36: \"07\", 37: \"07\", 38: \"06\"}, True),\r\n  \"10 A-2AR\": UnitDetail(4, 38, {35: \"09\", 36: \"08\", 37: \"08\", 38: \"07\"}, True),\r\n  \"11 A-1AR\": UnitDetail(4, 36, {35: \"10\", 36: \"09\",}, True),\r\n  \"12 A-1A\": UnitDetail(4, 31, {}, True),\r\n  \"01 A-3E\": UnitDetail(32, 32, {}),\r\n  \"02 A-2B.1\": UnitDetail(32, 32, {}),\r\n  \"01 A-1C\": UnitDetail(33, 36, {}),\r\n  \"02 A-2D\": UnitDetail(33, 42, {}),\r\n  \"07 A-3B\": UnitDetail(35, 35, {}),\r\n  \"05 A-3F\": UnitDetail(36, 36, {}),\r\n  \"01 A-3D\": UnitDetail(37, 39, {}),\r\n  \"05 A-3G\": UnitDetail(37, 37, {}),\r\n  \"03 A-2BR.1\": UnitDetail(38, 38, {}),\r\n  \"04 A-3H\": UnitDetail(38, 38, {}),\r\n  \"04 A-3A\": UnitDetail(39, 43, {43: \"03\",}),\r\n  \"06 A-3BR\": UnitDetail(39, 39, {}),\r\n  \"01 A-3J\": UnitDetail(40, 40, {}),\r\n  \"06 A-2BR.2\": UnitDetail(40, 40, {}),\r\n  \"01 A-3DR\": UnitDetail(41, 43, {}),\r\n  \"03 A-2DR\": UnitDetail(39, 42, {}),\r\n  \"02 A-3C\": UnitDetail(43, 43, {}),\r\n  \"04 A-3C\": UnitDetail(43, 43, {}),\r\n  \"06 A-2D\": UnitDetail(37, 42, {38: \"05\", 39: \"05\",  40: \"05\", 41: \"05\", 42: \"05\"}),\r\n  \"06 A-2B.1\": UnitDetail(36, 36, {}),\r\n}\r\n\r\n\r\ntarget_discipline = \"Lighting\"\r\n\r\nfiltered_views = []\r\n\r\n\r\nunit_source = {\r\n\r\n}\r\n\r\nmin = 5\r\nmax = 43\r\n\r\n\r\n@transaction\r\ndef start2():\r\n    source_views = get_view_range(\"Working Views\", target_discipline)\r\n    \r\n    sources_matrix = {}\r\n\r\n    for view in source_views:\r\n        if \"Level 4A\" in view.Name: continue\r\n\r\n        unit_name = re.search(r\"\\((.*?)\\)\", view.Name).group(1)\r\n        \r\n        print(unit_name)\r\n        filtered_elements = filter_source_elements2(view)\r\n        # level = get_num(view.LookupParameter(\"Associated Level\").AsValueString())\r\n        # view_level = re.findall(r\"\\s\\d{4}\\s\", view.Name)\r\n        unit_source[unit_name] = Source(view, filtered_elements)\r\n        print(\"====\\n\\n\")\r\n    target_views = get_view_range(\"Presentation Views\", target_discipline)\r\n\r\n    # for tview in target_views:\r\n    #     level = get_num(tview.Name)\r\n\r\n    #     if \"Dependent \" in tview.LookupParameter(\"Dependency\").AsValueString():\r\n    #         continue\r\n\r\n\r\n@transaction \r\ndef start():\r\n    source_views = get_view_range(\"Working Views\", target_discipline)\r\n\r\n    for view in source_views:\r\n        filtered_elements = filter_source_elements(view)\r\n        level = get_num(view.LookupParameter(\"Associated Level\").AsValueString())\r\n        view_level = re.findall(r\"\\s\\d{4}\\s\", view.Name)\r\n        if view_level != []:\r\n            unit_source[view_level[0]] = Source(view, filtered_elements)\r\n        else:\r\n            unit_source[level] = Source(view, filtered_elements)\r\n\r\n    target_views = get_view_range(\"Presentation Views\", target_discipline)\r\n    \r\n\r\n    for tview in target_views:\r\n        level = get_num(tview.Name)\r\n\r\n        if \"Dependent \" in tview.LookupParameter(\"Dependency\").AsValueString():\r\n            continue\r\n        \r\n        if 5 <= level <= 31:\r\n            print(level, tview.Name)\r\n            copied_ids = ElementTransformUtils.CopyElements(\r\n                unit_source[4].sview, \r\n                unit_source[4].elements_list, \r\n                tview, \r\n                Transform.Identity,\r\n                CopyPasteOptions()\r\n            )\r\n\r\n\r\n            copied_elements = [get_element(cid) for cid in copied_ids]\r\n\r\n            for celem in copied_elements:\r\n                if isinstance(celem, FamilyInstance): \r\n                    parameter = celem.LookupParameter(\"Schedule Level\")\r\n                    if parameter and not parameter.IsReadOnly:\r\n                        parameter.Set(tview.GenLevel.Id)\r\n     \r\n                    # if \"UNIT\" in celem.Name:\r\n                    #     print(\"UNITT\" , celem.Name, celem.Id)\r\n\r\n            # copied_tag_ids = ElementTransformUtils.CopyElements(\r\n            #     unit_source[4].sview, \r\n            #     unit_source[4].tag_list, \r\n            #     tview, \r\n            #     Transform.Identity,\r\n            #     CopyPasteOptions()\r\n            # )\r\n\r\n            break\r\n            # for i in elems:\r\n            #     print(i)\r\n\r\n\r\nstart2()\r\n\r\nOUT = output.getvalue()\r\n# OUT = filtered_views",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "b6c4443bafad485b8e4285f174d39dcc",
      "Inputs": [
        {
          "Id": "6de3c57c1cd54e139851ea000cf80d8a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ff470b3948544122aaf5301ff3110106",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a915be7963014d799dd69faed68204a0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "",
      "Id": "31f423f262e34ffa9a81b812a99d0cb3",
      "Inputs": [],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "d38b47f15e7346c4b796ecb48514e451",
      "Inputs": [
        {
          "Id": "e17e2880c68c41c98d2b49dc30f0a6fd",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d3759bf100f84a559eb0e082f0b04c00",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    }
  ],
  "Connectors": [
    {
      "Start": "475c85ddf0c84f79a65d131ee377ae33",
      "End": "6de3c57c1cd54e139851ea000cf80d8a",
      "Id": "c090597038fe48ff93d7201f38517584",
      "IsHidden": "False"
    },
    {
      "Start": "a915be7963014d799dd69faed68204a0",
      "End": "e17e2880c68c41c98d2b49dc30f0a6fd",
      "Id": "cd68dd1f4b5841e6b4bf2f55d0cdb7e6",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.13",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "d5c6362afcf8413bafd6e659ff1455e0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1084.81958960347,
        "Y": 50.941694315053581
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "b6c4443bafad485b8e4285f174d39dcc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1037.1860277269625,
        "Y": 267.64219781376573
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "31f423f262e34ffa9a81b812a99d0cb3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 769.24278243368326,
        "Y": 257.025411929245
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "d38b47f15e7346c4b796ecb48514e451",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1221.4293927413648,
        "Y": 161.61191214177134
      }
    ],
    "Annotations": [],
    "X": -703.78484381173075,
    "Y": -62.393748895433646,
    "Zoom": 0.91007848998356433
  }
}