{
  "Uuid": "61a5c8c2-e2e0-4517-b2bc-48e9a0accf04",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Create Working Plan",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "7ad407a89af547d28b372a3d69e46a6c",
      "Inputs": [
        {
          "Id": "e36342125cdd479080ca686ac2e03a74",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ac426d11a894693b2a56a95be0bb4ad",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport math\r\nfrom io import StringIO\r\n\r\nimport Autodesk\r\nimport RevitServices\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import FilteredElementCollector, ViewPlan, ViewDuplicateOption, BuiltInCategory, ElementTransformUtils, FamilyInstance\r\n\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Autodesk.Revit.DB import CurveLoop, DetailLine, XYZ, View, ElementId, Electrical\r\n\r\nclr.AddReference('System')\r\nfrom System.Collections.Generic import  IList \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\n\r\n\r\n# For Outputting print to watch node\r\noutput = StringIO()\r\nsys.stdout = output\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nactive_view = doc.ActiveView\r\n\r\ndef transaction(func):\r\n    def wrapper(*args, **kwargs):\r\n            TransactionManager.Instance.EnsureInTransaction(doc)\r\n            func(*args, **kwargs)\r\n            TransactionManager.Instance.TransactionTaskDone()\r\n    return wrapper\r\n\r\ndef print_member(obj):\r\n  for i in dir(obj):\r\n      print(i)\r\n\r\ndef get_element(id_str):\r\n  return doc.GetElement(ElementId(id_str))\r\n\r\ndef get_element_via_parameter(elements, parameter_name, parameter_value):\r\n    result = []\r\n    for el in elements:\r\n        param_ViewType = el.GetParameters(parameter_name)[0]\r\n        if param_ViewType.AsValueString() == parameter_value:\r\n            result.append(el)\r\n            continue\r\n    return result\r\n\r\ndef get_num(str):\r\n    return int(''.join(char for char in str if char.isdigit()))\r\n\r\n\r\ndef get_room_curve(group_elements):\r\n  room_curve = CurveLoop()\r\n  for id in group_elements:\r\n    e = doc.GetElement(id)\r\n    if isinstance(e, DetailLine):\r\n      line = e.GeometryCurve\r\n      room_curve.Append(line)\r\n  return room_curve\r\n \r\n\r\n\r\nfiltered_views = []\r\n\r\n\r\n\r\ntarget_discipline = \"Dynamo Copy Plan\"\r\n\r\n\r\n\r\n\r\ninfo = {\r\n    \"Data\": ElementId(1583642),\r\n    \"Power\": ElementId(1583645),\r\n    \"Fire Protection\": ElementId(2623561),\r\n    \"Lighting\": ElementId(1583644),\r\n    \"Device\": ElementId(1969664),\r\n    \"Dynamo Copy Plan\": ElementId(1582582),\r\n}\r\n\r\n@transaction \r\ndef start():\r\n    view_list = FilteredElementCollector(doc).OfClass(ViewPlan).ToElements()\r\n    \r\n    for view in view_list:\r\n        view_type = view.LookupParameter(\"View Type\").AsValueString()\r\n        if view_type != \"Utility Views\": continue\r\n\r\n        discipline = view.LookupParameter(\"Type\").AsValueString()\r\n        print(view.LookupParameter(\"Type\").AsValueString())\r\n        if discipline != \"Base Plan\": continue\r\n        \r\n        filtered_views.append(view)\r\n\r\n    print(\"Niggessr\", filtered_views)\r\n\r\n    for view in filtered_views:\r\n\r\n        crop_manager = view.GetCropRegionShapeManager()\r\n        shape = crop_manager.GetCropShape()\r\n        print(view.Name, view.GenLevel.Id)\r\n\r\n        # Create floor plan\r\n        floor_plan_type = info[target_discipline]\r\n        suffix = target_discipline[0]\r\n        if target_discipline == \"Device\":\r\n            suffix = \"CC\"\r\n        floor_plan = ViewPlan.Create(doc, floor_plan_type, view.GenLevel.Id)\r\n        floor_plan.Name = f\"Dynamo {view.Name.replace('UNIT', 'Unit')} {suffix}\"\r\n\r\n        # Set Values\r\n        floor_plan.LookupParameter(\"View Type\").Set(\"Working Views\")\r\n        floor_plan.LookupParameter(\"Sub-Discipline\").Set(target_discipline)\r\n        floor_plan.LookupParameter(\"Discipline\").Set(\"Electrical\")\r\n        \r\n        # Set Crop Setting\r\n        floor_plan.CropBoxVisible = True\r\n        floor_plan.CropBoxActive = True\r\n\r\n        # Set Crop Shape\r\n        floor_plan_crop_manager = floor_plan.GetCropRegionShapeManager()\r\n        floor_plan_crop_manager.SetCropShape(shape[0])\r\n\r\n        if view.Name == \"LEVEL 4A Base\":\r\n            detail_groups = FilteredElementCollector(doc, view.Id).OfCategory(BuiltInCategory.OST_IOSDetailGroups).ToElements()\r\n            curve_dict = {}\r\n            for dg in detail_groups:\r\n                if not dg: continue\r\n                group_elements = dg.GetMemberIds()\r\n                element = get_room_curve(group_elements)\r\n                curve_dict[dg.Name] = element\r\n                \r\n            for unit_name, curve in curve_dict.items():\r\n                # Duplicate\r\n                new_plan = floor_plan.Duplicate(ViewDuplicateOption.AsDependent)\r\n                dupli_view = doc.GetElement(new_plan)\r\n                dupli_view.CropBoxVisible = True\r\n                dupli_view.CropBoxActive = True\r\n\r\n                # Set Crop Shape\r\n                crop_manager = dupli_view.GetCropRegionShapeManager()\r\n                crop_manager.SetCropShape(curve)\r\n\r\n                # Rename\r\n                level = get_num(view.Name)\r\n                rename = f\"Dynamo Unit {level:02d}{unit_name.replace(' ', ' (')}) {suffix}\"\r\n                print(rename)\r\n                dupli_view.Name = rename\r\n\r\n        # break\r\nstart()\r\n\r\nOUT = output.getvalue()\r\n# OUT = filtered_views",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "0937a8a9de5542c19ffe94d299da8c4b",
      "Inputs": [
        {
          "Id": "97597115f7994d52bd3d3027a178d830",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "80f9393affe64803b2a49e562438c8a0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "1cfd765cdca44456b1e0b3fee94d13d6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c6df3d66c16a45ea9f57984bfc6a3eed",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    }
  ],
  "Connectors": [
    {
      "Start": "80f9393affe64803b2a49e562438c8a0",
      "End": "e36342125cdd479080ca686ac2e03a74",
      "Id": "cb4e6d01bc30417ba38bdffb23b640ae",
      "IsHidden": "False"
    },
    {
      "Start": "c6df3d66c16a45ea9f57984bfc6a3eed",
      "End": "97597115f7994d52bd3d3027a178d830",
      "Id": "d00bb68ccf6740d7b82ea449d51b8c81",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.13",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "7ad407a89af547d28b372a3d69e46a6c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 394.89576989459454,
        "Y": 47.949289669903436
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "0937a8a9de5542c19ffe94d299da8c4b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 93.089638620351877,
        "Y": 138.72256300925085
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "1cfd765cdca44456b1e0b3fee94d13d6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 129.23296151504195,
        "Y": 5.3269661075516694
      }
    ],
    "Annotations": [],
    "X": 264.12705818727824,
    "Y": 91.586993767276084,
    "Zoom": 1.2928910957911357
  }
}